{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list.component.jsx","component/search-box/search-box.component.js","App.js","serviceWorker.js","index.js"],"names":["Card","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hideDetails","setState","showDetails","event","state","react_default","a","createElement","className","props","people","name","onClick","height","hair_color","skin_color","eye_color","birth_year","gender","React","Component","CardList","peoples","map","card_component","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","peopleDetails","bindPeopleState","response","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","results","Symbol","iterator","next","done","value","push","err","return","callAPI","url","fetch","then","json","searchField","target","_this$state","filteredPeople","filter","toLowerCase","includes","search_box_component_SearchBox","card_list_component_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b39d25e1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\n\r\nclass Card extends React.Component {\r\n\r\n  constructor(){\r\n    super();\r\n\r\n    this.state ={\r\n      showDetails:false\r\n    }\r\n  }\r\n\r\n  hideDetails = () => {\r\n    this.setState({showDetails: false});\r\n  }\r\n\r\n  showDetails = (event) => {\r\n    this.setState({showDetails: true});\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"people card\">\r\n        <h2>{ this.props.people.name }</h2>\r\n\r\n        {\r\n          this.state.showDetails\r\n          ?\r\n          (\r\n            <div>\r\n\r\n              <div onClick={this.hideDetails}>\r\n                <i className='fa fa-chevron-circle-up fa-5px'></i>\r\n              </div>\r\n              <ul className='details'>\r\n      \t\t\t\t\t<li>Height: {this.props.people.height}</li>\r\n      \t\t\t\t\t<li>Hair Color: {this.props.people.hair_color}</li>\r\n      \t\t\t\t\t<li>Skin Color: {this.props.people.skin_color}</li>\r\n      \t\t\t\t\t<li>Eye Color: {this.props.people.eye_color}</li>\r\n      \t\t\t\t\t<li>Birth Year: {this.props.people.birth_year}</li>\r\n      \t\t\t\t\t<li>Gender: {this.props.people.gender}</li>\r\n\t        \t</ul>\r\n            </div>\r\n          )\r\n          :\r\n          (\r\n            <div onClick={this.showDetails}>\r\n              <i className='fa fa-chevron-circle-down fa-5px'></i>\r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport './card-list.style.css';\r\nimport Card from '../card/card.component';\r\n\r\nexport const CardList = (props) => (\r\n    <div className=\"card-list\">\r\n    {\r\n      props.peoples.map(people=>{\r\n          return <Card key={people.name} people={people} />\r\n      })\r\n    }\r\n    </div>\r\n);\r\n","import React from 'react';\r\n\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n  <input\r\n    className='search'\r\n    type='search'\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n  />\r\n)\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport { CardList } from './component/card-list/card-list.component';\r\nimport { SearchBox } from './component/search-box/search-box.component';\r\n\r\nclass App extends Component {\r\n  peopleDetails = [];\r\n\r\n  constructor(){\r\n    super();\r\n\r\n    this.state = {\r\n      peoples: [],\r\n      searchField: ''\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.callAPI('https://swapi.co/api/people/');\r\n  }\r\n\r\n  bindPeopleState = (response) => {\r\n    for(let people of response.results){\r\n      this.peopleDetails.push(people);\r\n      this.setState({peoples: this.peopleDetails})\r\n    }\r\n\r\n    if(response.next){\r\n      this.callAPI(response.next)\r\n    }\r\n  }\r\n\r\n  callAPI = (url) => {\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(response => this.bindPeopleState(response));\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({searchField : event.target.value })\r\n  }\r\n\r\n  render(){\r\n    const { peoples, searchField } = this.state;\r\n    const filteredPeople = peoples.filter(people => {\r\n      return people.name.toLowerCase().includes(searchField.toLowerCase())\r\n    })\r\n    return (\r\n      <div className=\"App\">\r\n      <h1> Star Wars Scout </h1>\r\n      <h3> May the Force be with you</h3>\r\n        <SearchBox\r\n          placeholder='Search your character'\r\n          handleChange={this.handleChange }/>\r\n        <CardList peoples={filteredPeople} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}